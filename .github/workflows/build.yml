name: Build and Test

## Temporarily moved to pull_request so branch builds from this
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      proBranchName: steps.find-branches.outputs.proBranchName
      proBranchSha: steps.find-branches.outputs.proBranchSha
      standAlonePR: steps.find-branches.outputs.standAlonePR
      proState: steps.find-branches.outputs.proState
      proRunStatus: steps.find-branches.outputs.proRunStatus
      proConclusion: steps.find-branches.outputs.proConclusion
    steps:
    - name: Find corresponding branches
      id: find-branches
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.BOT_TOKEN }}
        script: |
          const helper = require('./.github/util/workflow-helper.js')({github, context});

          let branch = await helper.findMatchingBranch("datical", "liquibase-pro", [context.payload.pull_request.head.ref, context.payload.pull_request.base.ref, "main", "master"]);
          core.setOutput("proBranchName", branch.name);
          core.setOutput("proBranchSha", branch.sha);
          core.setOutput("standAlonePR", helper.getCurrentBranch() !== branch.name);
          core.setOutput("proState", branch.pullRequestState);
          core.setOutput("proRunStatus", branch.runStatus);
          core.setOutput("proConclusion", branch.runConclusion);
      - name: Update Liquibase-Pro Check
        uses: actions/github-script@v4
        if: ${{ steps.find-branches.outputs.standAlonePR == 'false' }}
        with:
          script: |
            await github.checks.create({
              "owner": "liquibase",
              "repo": "liquibase-pro",
              "name": "Liquibase Core Build",
              "head_sha": "${{ github.sha }}",
              "status": "${{ job.status }}",
              "details_url": "https://github.com/liquibase/liquibase/actions/runs/${{ github.run_id }}"
            });

  build:
    name: Build & Test (Java ${{ matrix.java }})
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java: [ 8, 11, 16 ]
    steps:
      - uses: actions/checkout@v2
      - name: Local Maven Repository Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/org/liquibase
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Built Code Cache
        if: ${{ matrix.java == 8}}
        uses: actions/cache@v2
        with:
          key: built-code-${{ github.sha }}
          path: ./**/target
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java }}
          distribution: 'adopt'
      - name: Build & Test
        run: mvn -B -Dbuild.branch=${{ github.event.pull_request.head.ref }} -Dbuild.number=${{ github.run_number }} -Dbuild.commit=${{ github.sha }} -pl '!liquibase-dist' clean test package
      - name: Archive Test Results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: liquibase-test-results-jdk${{ matrix.java }}
          path: ./**/target/surefire-reports

      - name: Archive Modules
        if: ${{ matrix.java == 8}}
        uses: actions/upload-artifact@v2
        with:
          name: liquibase-modules
          path: |
            */target/*-0-SNAPSHOT.jar

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: build
    if: false #disabled during development
    steps:
      - uses: actions/checkout@v2
      - name: Local Maven Repository Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/org/liquibase
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Restore Built Code Cache
        uses: actions/cache@v2
        with:
          key: built-code-${{ github.sha }}
          path: ./**/target

      - name: Login to Artifactory
        uses: docker/login-action@v1
        with:
          registry: docker-dev.artifactory.datical.net
          username: ${{ secrets.RT_USER }}
          password: ${{ secrets.RT_TOKEN }}
      - name: Start Docker Databases
        run: docker-compose -f ./liquibase-integration-tests/docker/docker-compose.yml up -d
      - name: Run Tests
        run: mvn -B jar:jar jar:test-jar surefire:test
      - name: Stop Docker Databases
        run: docker-compose -f ./liquibase-integration-tests/docker/docker-compose.yml down
      - name: Archive Test Results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: liquibase-test-results-integration
          path: |
            ./**/target/surefire-reports

  package:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
      - uses: actions/checkout@v2

      - name: Local Maven Repository Cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Built Code Cache
        uses: actions/cache@v2
        with:
          key: built-code-${{ github.sha }}
          path: ./**/target
      - name: Install4j Cache
        uses: actions/cache@v2
        with:
          key: install4j8-
          path: ~/.install4j

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Download liquibase-pro
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.BOT_TOKEN }}
          workflow: build.yml
          workflow_conclusion: success
          branch: "${{ needs.setup.outputs.proBranchName }}"
          name: liquibase-pro
          path: download/liquibase-pro
          repo: datical/liquibase-pro

      - name: Install Built Modules
        run: |
          (find . -name *-SNAPSHOT.jar -exec mvn -B org.apache.maven.plugins:maven-install-plugin:3.0.0-M1:install-file -Dfile={} \;)
          mvn -B org.apache.maven.plugins:maven-install-plugin:3.0.0-M1:install-file -Dfile=download/liquibase-pro/liquibase-pro-0-SNAPSHOT.jar
      #          (find . -name *-SNAPSHOT-sources.jar -exec mvn -B org.apache.maven.plugins:maven-install-plugin:3.0.0-M1:install-file -Dfile={} \;)

      - name: Build Final Jar & Tar/Zips
        run: mvn -B -pl liquibase-dist -P liquibase-pro package

      - name: Build Install4J installers
        run: |
          mkdir -p ~/.install4j8
          export INSTALL4J_CACHE=$HOME/.install4j8
          wget -nv --directory-prefix=$INSTALL4J_CACHE -nc https://download-gcdn.ej-technologies.com/install4j/install4j_linux_8_0_11.deb
          sudo apt install -y $INSTALL4J_CACHE/install4j_linux_8_0_11.deb
          (cd liquibase-dist && src/main/package/package-install4j.sh 0-SNAPSHOT

      - name: Archive Packages
        uses: actions/upload-artifact@v2
        with:
          name: liquibase-artifacts
          path: |
            liquibase-dist/target/liquibase-0-SNAPSHOT.tar.gz
            liquibase-dist/target/liquibase-0-SNAPSHOT.zip
            liquibase-dist/target/liquibase-0-SNAPSHOT.jar
            liquibase-dist/target/liquibase-*-installer-*
            liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT.jar
            liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT.jar

  finish:
    name: Finish Build
    runs-on: ubuntu-latest
    needs: [ setup, build, integration-test, package ]
    if: always()
    steps:
      - name: Update Liquibase-Pro Check
        uses: actions/github-script@v4
        if: ${{ needs.setup.outputs.standAlonePR == 'false' }}
        with:
          script: |
            await github.checks.create({
              "owner": "liquibase",
              "repo": "liquibase-pro",
              "name": "Liquibase Core Build",
              "head_sha": "${{ github.sha }}",
              "status": "${{ job.status }}",
              "details_url": "https://github.com/liquibase/liquibase/actions/runs/${{ github.run_id }}"
            });
